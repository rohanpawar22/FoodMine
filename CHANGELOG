# 9.0
1. Added ngx-toastr
2. Added login component
3. Added user service.
4. Created login api.
5. Installed jwtWebToken json token.
6. Integrated login api, handled login and logout functionality


# 8.0
1. Added httpClientModule in app module.
2. Modified the food service file to use api names.
3. Added urls.ts file with api names and port.
4. Modified food-page, tags and home ts to subscribe and get the data from backend.


# 7.0
1. Added backend folder.
2. Moved changelog outside of frontend folder.
3. Added src folder inside backend, added data.ts and server.ts file.
4. installed nodemon, node for backend.
5. Created API's to get the food list, tag list, food by id, food by tags.


# 6.0
1. Created Not Found component.
2. Used it in Cart-page, home, food-page.


# 5.0
1. Added cart-page component and functionality.
2. Added title component.
3. Added cart.ts and cartItem.ts model
4. Made the header cart count dynamic.


# 4.0
1. Added tags sample data in data.ts
2. Created tags component, using it in home component.
3. Created food-page component, added html css and logic ts for it.
4. Added methods to get tags, food by id in food service.


# 3.0
1. Created Search component. using it in home component.
2. Added router outlet
3. Added method for search in services.
4. Added routes for components.


# 2.0
1. Created food.ts interface for food objects in models.
2. Created data.ts and added dummy food object data.
3. Created Home component, added html ts css for it. showing all the data.ts list in home component.
4. Created star rating component. used it in home component.
5. Created food images and star images under assests.
6. Created food service to get all food data from data.ts


# 1.0
1. Created components folder, created partials folder inside of components.
2. Created Header component inside partials.
3. Added html and styles for header component.
